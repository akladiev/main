name: Gathering Pipeline Statistics
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

jobs:
  Gather_Statistics:
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    env:
      ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create Artifacts Directory
        run: mkdir -p ${{ env.ARTIFACTS_DIR }}

      - name: Show Context
        uses: actions/github-script@v6
        with:
          script: |
            console.log(context)
            console.log(context.runId)
            console.log(context.payload.repository.full_name)
      
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - run: npm install xlsx
      
      - name: Gather Workflows Data
        uses: actions/github-script@v6
        with:
          script: |
            var fs = require('fs');
            var XLSX = require('xlsx');
            
            const date = new Date();
            
            var day = date.getDate();
            // Month is starting from 0 for some reason
            var month = date.getMonth() + 1;
            let year = date.getFullYear();
            
            if (day < 10) {
              day = `0${day}`
            }
            
            if (month < 10) {
              month = `0${month}`
            }
            
            // Only gather workflow runs that ran on the specified date or after
            // let dateToStartGatheringFrom = `>=${year}-${month}-${day}`
            
            // TODO: use dynamic date
            const dateToStartGatheringFrom = `>=2023-07-05`
            console.log(`dateToStartGatheringFrom: ${dateToStartGatheringFrom}`)
            
            // TODO: use context.payload.repository.organization
            const org = 'openvinotoolkit'
            
            // TODO: use context.payload.repository.name
            const repositoryName = 'openvino_contrib'

            // TODO: use desired name
            const pipelineName = 'test_linux.yml'
            
            const workflowRunsData = await github.rest.actions.listWorkflowRuns({
              'owner': org,
              'repo': repositoryName,
              'workflow_id': pipelineName,
              'status': 'completed',
              'created': dateToStartGatheringFrom
            })
            
            const workflowRunsStats = []

            for (const workflowData of workflowRunsData.data.workflow_runs) {

                const workflowRunStats = {}

                const runID = workflowData.id

                workflowRunStats['Run ID'] = runID
                workflowRunStats['URL'] = workflowData.html_url
                workflowRunStats['Started At'] = workflowData.run_started_at ? workflowData.run_started_at : 'Did not start'
                workflowRunStats['Status'] = workflowData.conclusion
                workflowRunStats['Jobs'] = []

                const workflowDuration = await github.rest.actions.getWorkflowRunUsage({
                    'owner': org,
                    'repo': repositoryName,
                    'run_id': runID
                })

                workflowRunStats['Total Duration'] = workflowDuration.data.run_duration_ms ? workflowDuration.data.run_duration_ms / 1000 / 60 : undefined

                const workflowJobs = await github.rest.actions.listJobsForWorkflowRun({
                    'owner': org,
                    'repo': repositoryName,
                    'run_id': runID
                })
                
                for (const workflowJob of workflowJobs.data.jobs) {

                    const jobStart = new Date(workflowJob.started_at)
                    const jobEnd = new Date(workflowJob.completed_at)
                    const jobDuration = Math.abs(jobEnd - jobStart) / 1000 / 60

                    workflowRunStats['Jobs'].push({
                        Job: workflowJob.name,
                        Duration: jobDuration,
                        Status: workflowJob.conclusion
                    })
                }

                workflowRunsStats.push(workflowRunStats)
            }

            var rows = [];
            workflowRunsStats.forEach(function (entry) {
                var row = {
                    'Run ID': entry['Run ID'],
                    'URL': entry.URL,
                    'Started At': entry['Started At'],
                    'Status': entry.Status,
                    'Total Duration': entry['Total Duration']
                };
                entry.Jobs.forEach(function (job) {
                    row[job.Job + '_Duration'] = job.Duration;
                    row[job.Job + '_Status'] = job.Status;
                });
                rows.push(row);
            });
              
            const worksheet = XLSX.utils.json_to_sheet(rows);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Workflow Runs');

            const artifactPath = `${{ env.ARTIFACTS_DIR }}/workflowRuns_from_${dateToStartGatheringFrom}.xlsx`

            XLSX.writeFile(workbook, artifactPath);

      - name: Upload gathered data
        uses: actions/upload-artifact@v3
        with:
          name: Workflow Runs
          path: ${{ env.ARTIFACTS_DIR }}/workflowRuns*.xlsx
          if-no-files-found: 'error'
